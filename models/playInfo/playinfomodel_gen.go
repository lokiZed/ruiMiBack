// Code generated by goctl. DO NOT EDIT.

package playInfo

import (
	"context"
	"database/sql"
	"fmt"
	"strings"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	playInfoFieldNames          = builder.RawFieldNames(&PlayInfo{})
	playInfoRows                = strings.Join(playInfoFieldNames, ",")
	playInfoRowsExpectAutoSet   = strings.Join(stringx.Remove(playInfoFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	playInfoRowsWithPlaceHolder = strings.Join(stringx.Remove(playInfoFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"
)

type (
	playInfoModel interface {
		Insert(ctx context.Context, data *PlayInfo) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*PlayInfo, error)
		Update(ctx context.Context, data *PlayInfo) error
		Delete(ctx context.Context, id int64) error
	}

	defaultPlayInfoModel struct {
		conn  sqlx.SqlConn
		table string
	}

	PlayInfo struct {
		Id          int64 `db:"id"`
		ChallengeId int64 `db:"challengeId"`
		UserId      int64 `db:"userId"`
		Score       int64 `db:"score"`
	}
)

func newPlayInfoModel(conn sqlx.SqlConn) *defaultPlayInfoModel {
	return &defaultPlayInfoModel{
		conn:  conn,
		table: "`playInfo`",
	}
}

func (m *defaultPlayInfoModel) Delete(ctx context.Context, id int64) error {
	query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
	_, err := m.conn.ExecCtx(ctx, query, id)
	return err
}

func (m *defaultPlayInfoModel) FindOne(ctx context.Context, id int64) (*PlayInfo, error) {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", playInfoRows, m.table)
	var resp PlayInfo
	err := m.conn.QueryRowCtx(ctx, &resp, query, id)
	switch err {
	case nil:
		return &resp, nil
	case sqlx.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultPlayInfoModel) Insert(ctx context.Context, data *PlayInfo) (sql.Result, error) {
	query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?)", m.table, playInfoRowsExpectAutoSet)
	ret, err := m.conn.ExecCtx(ctx, query, data.ChallengeId, data.UserId, data.Score)
	return ret, err
}

func (m *defaultPlayInfoModel) Update(ctx context.Context, data *PlayInfo) error {
	query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, playInfoRowsWithPlaceHolder)
	_, err := m.conn.ExecCtx(ctx, query, data.ChallengeId, data.UserId, data.Score, data.Id)
	return err
}

func (m *defaultPlayInfoModel) tableName() string {
	return m.table
}
