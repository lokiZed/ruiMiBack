// Code generated by goctl. DO NOT EDIT.

package challengeUser

import (
	"context"
	"database/sql"
	"fmt"
	"strings"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	challengeUserFieldNames          = builder.RawFieldNames(&ChallengeUser{})
	challengeUserRows                = strings.Join(challengeUserFieldNames, ",")
	challengeUserRowsExpectAutoSet   = strings.Join(stringx.Remove(challengeUserFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	challengeUserRowsWithPlaceHolder = strings.Join(stringx.Remove(challengeUserFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"
)

type (
	challengeUserModel interface {
		Insert(ctx context.Context, data *ChallengeUser) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*ChallengeUser, error)
		Update(ctx context.Context, data *ChallengeUser) error
		Delete(ctx context.Context, id int64) error
	}

	defaultChallengeUserModel struct {
		conn  sqlx.SqlConn
		table string
	}

	ChallengeUser struct {
		Id          int64         `db:"id"`
		UserId      sql.NullInt64 `db:"userId"`
		ChallengeId sql.NullInt64 `db:"challengeId"`
		LeaveNum    sql.NullInt64 `db:"leaveNum"`
	}
)

func newChallengeUserModel(conn sqlx.SqlConn) *defaultChallengeUserModel {
	return &defaultChallengeUserModel{
		conn:  conn,
		table: "`challengeUser`",
	}
}

func (m *defaultChallengeUserModel) Delete(ctx context.Context, id int64) error {
	query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
	_, err := m.conn.ExecCtx(ctx, query, id)
	return err
}

func (m *defaultChallengeUserModel) FindOne(ctx context.Context, id int64) (*ChallengeUser, error) {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", challengeUserRows, m.table)
	var resp ChallengeUser
	err := m.conn.QueryRowCtx(ctx, &resp, query, id)
	switch err {
	case nil:
		return &resp, nil
	case sqlx.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultChallengeUserModel) Insert(ctx context.Context, data *ChallengeUser) (sql.Result, error) {
	query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?)", m.table, challengeUserRowsExpectAutoSet)
	ret, err := m.conn.ExecCtx(ctx, query, data.UserId, data.ChallengeId, data.LeaveNum)
	return ret, err
}

func (m *defaultChallengeUserModel) Update(ctx context.Context, data *ChallengeUser) error {
	query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, challengeUserRowsWithPlaceHolder)
	_, err := m.conn.ExecCtx(ctx, query, data.UserId, data.ChallengeId, data.LeaveNum, data.Id)
	return err
}

func (m *defaultChallengeUserModel) tableName() string {
	return m.table
}
